import geopandas as gpdimport concurrent.futuresfrom glob import globfrom codar_processing.radials import Radialfrom geopandas import GeoDataFramefrom shapely.geometry import Pointfrom geopandas.tools import sjoinimport pandas as pdimport copyimport osdesired_width = 320pd.set_option('display.width', desired_width)radial_dir = '/Volumes/home/codaradm/data/radials/'save_dir = '/Users/mikesmith/Documents/projects/bpu/test/'sites = ['NAUS', 'NANT', 'BLCK', 'AMAG', 'MRCH', 'HEMP', 'HOOK', 'LOVE', 'BRIG', 'WILD', 'ASSA', 'CEDR', 'LISL', 'DUCK', 'HATY', 'CORE']sub_dir = '2016_01'# Load leasing areas shape file with geopandas# shape_file = '/Users/mikesmith/Downloads/NY_Call_Areas_4_4_2018/NY_Call_Areas_4_4_2018.shp'shape_file = '/Users/mikesmith/Downloads/NY_Call_Areas_4_4_2018/hudson_south_subset.shp'leasing_areas = gpd.read_file(shape_file)leasing_areas = leasing_areas.to_crs(crs={'init': 'epsg:4326'})def intersect_data(radial):    for name in leasing_areas.AREA_NM.unique():        # Load radial file with codar_processing toolbox and convert to GeoDataFrame        try:            r = Radial(radial)        except FileNotFoundError:            continue        if r.is_valid():            orig = r.data.shape            # For some reason, converting to a geodataframe is propagating back to the orginal loaded dataset so create a deep copy            gdf = GeoDataFrame(copy.deepcopy(r.data), crs={'init': 'epsg:4326'},                               geometry=[Point(xy) for xy in zip(r.data.LOND, r.data.LATD)])            # Join the geodataframe containing radial points with geodataframe containing leasing areas            pointInPolys = sjoin(gdf, leasing_areas, how='left')            # Group by intersecting points            intersecting_data = []            grouped = pointInPolys.groupby('index_right')            for group in list(grouped):                intersecting_data.append(group[1])            if intersecting_data:                # Create new dataframe that contains points from the radial file that intersect with all leasing areas                intersecting_data = pd.concat(intersecting_data)                subset = intersecting_data[intersecting_data['AREA_NM'] == name]                bad_range_cells = subset['SPRC'].unique()  # Get list of range cells affected by wind turbines                r.data = r.data[~r.data['SPRC'].isin(bad_range_cells)]            print('{} - {} radials removed'.format(radial, orig[0]-r.data.shape[0]))            save_path = os.path.join(save_dir, '_'.join(name.split(' ')).lower(), r.header['Site'].split()[0],                                     os.path.basename(radial))            r.create_ruv(save_path)for site in sites:    radials = sorted(glob(os.path.join(radial_dir, site, sub_dir, 'RDLi*_2016_01_23_2300.ruv')))    # for radial in radials:    with concurrent.futures.ProcessPoolExecutor(max_workers=16) as executor:        zip(radials, executor.map(intersect_data, radials))